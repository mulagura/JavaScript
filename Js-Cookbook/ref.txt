// basic tutorial reference 46 videos
https://www.youtube.com/watch?v=s6R0VEdoVt4&index=1&list=PLqq-6Pq4lTTYFJxC9NLJ7dSTI5Z1WWB6K

//full reference
   https://developer.mozilla.org/bm/docs/Web/JavaScript

  What is Js?
   JS is Lightweight( small memory and easy to implement ),Interpreted( No compilation.Instructions Executes directly ),
   O-O ,first-class functions( where functions can be used as values ),scripting Language.


   // JS as O-O
      https://www.youtube.com/watch?v=rlLuL3jYLvA
      https://www.youtube.com/watch?v=Q-sP71DgKK0
      http://viralpatel.net/blogs/object-oriented-programming-with-javascript/


// Programming vs Scripting Language
https://www.geeksforgeeks.org/whats-the-difference-between-scripting-and-programming-languages/


// DOM
  https://www.digitalocean.com/community/tutorials/introduction-to-the-dom
  // BOM
  https://www.w3schools.com/js/js_window.asp
// console
https://www.freecodecamp.org/news/how-to-get-the-most-out-of-the-javascript-console-b57ca9db3e6d/

//declaration,intialization/definition and assigning
   https://teamtreehouse.com/community/what-is-the-difference-between-declaring-a-variable-and-initializing-a-variable

//    assigning: throwing away the old value of a variable and replacing it with a new one
//
// initialization / definition: it's a special kind of assignment: the first. Before initialization objects have null value and primitive types
//                 have default values such as 0 or false. Can be done in conjunction with declaration.
//
// declaration: a declaration states the type of a variable, along with its name. A variable can be declared only once.
//              It is used by the compiler to help programmers avoid mistakes such as assigning string values to integer variables.
//              Before reading or assigning a variable, that variable must have been declared.

//undefined
  if you declare a variable but not assigned then its value is undefined of type undefined.

//null
    typeof null === 'object'; // This stands since the beginning of JavaScript
    A "fix" was proposed for ECMAScript (via an opt-in). It would have resulted in:

    typeof null === 'null'
    ... but this change was rejected, due to issues with code using this specific "quirk" to test for null.


    // ways to create objects
     https://stackoverflow.com/questions/6843951/which-way-is-best-for-creating-an-object-in-javascript-is-var-necessary-befor
      https://www.w3schools.com/js/js_object_definition.asp

         ways to create objects
   https://stackoverflow.com/questions/6843951/which-way-is-best-for-creating-an-object-in-javascript-is-var-necessary-befor
    https://www.w3schools.com/js/js_object_definition.asp

      Property Access

ECMAScript 5 (2009) allows property access [ ] on strings:
Example
var str = "HELLO WORLD";
str[0];                   // returns H
Property access might be a little unpredictable:
It does not work in Internet Explorer 7 or earlier
It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = "A" gives no error (but does not work!)
Example
var str = "HELLO WORLD";
str[0] = "A";             // Gives no error, but does not work
str[0];                   // returns H
If you want to work with a string as an array, you can convert it to an array.
function declaration vs function expression
https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052

indexOf,lastIndexOf //string and array
https://www.youtube.com/watch?v=xdziI2avnZ4
push,pop,shift,unshift

JS Arrays
https://www.youtube.com/watch?v=arIhhRd1RPc&list=PLyuRouwmQCjnupe_ohQgFvwFZF8dycwK8

js arrays steve griffith


string methods
https://www.youtube.com/watch?v=VRz0nbax0uI
array methods
https://www.youtube.com/watch?v=MeZVVxLn26E

  //map,reduce,filter

  //forEach

  //arrow functions

  //cors
https://www.codecademy.com/articles/what-is-cors

//scope of a variable,let,const


  //1.object literals

  http://www.dyn-web.com/tutorials/object-literal/
  http://www.dyn-web.com/tutorials/object-literal/properties.php
  https://www.w3schools.com/js/js_objects.asp

  Closures
http://javascriptissexy.com/understand-javascript-closures-with-ease/

this
http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/
https://toddmotto.com/understanding-the-this-keyword-in-javascript/

.call vs .apply
https://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply
http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/

.bind method
https://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method

curry a function
https://www.sitepoint.com/currying-in-functional-javascript/

function expression vs declaration
https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/

hoisting
https://scotch.io/tutorials/understanding-hoisting-in-javascript

set
https://www.youtube.com/watch?v=mzlIYyY6he4

ES6
The net Ninja(regex and stuff)
window object vs document object
http://eligeske.com/jquery/what-is-the-difference-between-document-and-window-objects-2/
primitive vs non-primitive
https://medium.com/@junshengpierre/javascript-primitive-values-object-references-361cfc1cbfb0
bracket vs dot notation
https://codeburst.io/javascript-quickie-dot-notation-vs-bracket-notation-333641c0f781
seal vs freeze vs preventExtensions
https://github.com/piecioshka/test-freeze-vs-seal-vs-preventExtensions

ES6
for in vs for of
https://www.youtube.com/watch?v=bDt--Mtj094
https://www.youtube.com/watch?v=a3KHBqH7njs&t=11s
lets learn by ryan chritiani


     http://javascriptissexy.com/

      OOPS
     http://javascriptissexy.com/oop-in-javascript-what-you-need-to-know/


2.obj new contructor

protoptype vs Constructor
https://stackoverflow.com/questions/28600238/trying-to-understand-the-difference-between-prototype-and-constructor-in-javascr
http://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html

js prototype..prototype vs __proto__
http://javascriptissexy.com/javascript-prototype-in-plain-detailed-language/


//JWT
https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec
https://jwt.io/introduction/

// Auth0 and AuthGuard
https://www.youtube.com/watch?v=i_dHFvi1BJc&list=WL&index=2&t=1471s

https://www.codeproject.com/Articles/1203649/MEAN-Stack-with-Angular-Auth-Auth-JWT-Authoriza


https://medium.com/beginners-guide-to-mobile-web-development/everything-you-need-to-know-about-es6-arrow-functions-and-lexical-this-19cce1a49bdf

https://tylermcginnis.com/arrow-functions/

https://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/

https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/

https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26

psudo classes pseudoelemnts
inline inline block
display
position
order of css
css mediaqueries
shadow dom in angular
viewEncapsuation in angular
normalize css vs reset css
singleton in js ---- 
event bubbling delegation event binding
es6 features
css float
css box model
why typescript than js
life cycle hooks --> ngOnDestroy()
html vs html5
canvas svg
forms in angular4
http codes
ts public private
compile vs run time errors,, differnt types





....................................JS Interview practice.....................................................
.............................................................................................................
..........................................................................................................

// https://www.maxpou.fr/js-exercises-explained
// https://performancejs.com/post/hde6d32/The-Best-Frontend-JavaScript-Interview-Questions-%28written-by-a-Frontend-Engineer%29
// https://github.com/h5bp/Front-end-Developer-Interview-Questions
// https://github.com/khan4019/front-end-Interview-Questions
// https://github.com/kennymkchan/interview-questions-in-javascript
// https://www.toptal.com/javascript/interview-questions
// https://www.codementor.io/nihantanu/21-essential-javascript-tech-interview-practice-questions-answers-du107p62z
// https://github.com/ganqqwerty/123-Essential-JavaScript-Interview-Questions
// https://www.interviewcake.com/javascript-interview-questions

Palindrome

https://medium.freecodecamp.org/two-ways-to-check-for-palindromes-in-javascript-64fea8191fd7
function checkPalindrom(str) {
    var str = str.replace(/[^a-zA-Z0-9]+/gi, '').toLowerCase();
    return str == str.split('').reverse().join('');
}

function checkPalindrom(str) {
    return str == str.split('').reverse().join('');
}

function Palindrome3(){
    for(var i=0;i<str.length;i++){
        reverse = reverse + str.split().pop();
    }
    if(reverse === str){
    console.log("Palindomre");

}

// 1. Write a function that will loop through a list of integers
   // and print the index of each element after a 3 second delay. 

(function printIndex(){
    for(let i=0;i<10;i++){
        setTimeout(()=>{
            console.log(i);
        },3000);
    }
})();

/*or */

(function printIndex(){
    for(var i=0;i<10;i++){
        function display(j){
            setTimeout(()=>{
                console.log(j);
            },3000);
        }
        display(i);
    }
})();

// 2. I want this code to log “hey amy”, but it logs “hey arnold” - why?

function greet (person) {
    if (person == { name: 'amy' }) {
      console.log( 'hey amy');
    } else {
        console.log( 'hey arnold');
    }
  }
  greet({ name: 'amy' });
// Here the problem is the following: { name: 'amy' } != { name: 'amy' }. 
  //When comparing two objects with equality or strict equality, 
  //JavaScript gonna compare the related internal references. 
  //Here, these two objects have the same properties and the same value. 
  //But in memory, this is 2 different objects.  
 
  function greet (person) {
    if (person.name === 'amy') {
      return 'hey amy'
    }
    return 'hey arnold'
  }
  greet({ name: 'amy' }) // "hey amy"

// 3. I want this code to log out “doggo”, but it logs out undefined!  
let dog = {
    name: 'doggo',
    sayName () {
      return this.name;
    }
  }
  let sayName = dog.sayName
  console.log(sayName()); // undefined
  // we need to bind the dog the context on it
  console.log(sayName.bind(dog)()); // doggo

// 4. 
function isBig (thing) {
  if (thing == 0 || thing == 1 || thing == 2) {
    return false
  }
  return true
}
isBig(1)    // false
isBig([2])  // false
isBig([3])  // true

// When comparing an array to a number, the array will be converted to a number.
 //if we compare a number with an Object (reminder: arrays are object in JS), 
 //this array will be converted to an array. Here, there is only one item inside so [2] == 2.
 
// 5. isPrime - Returns true or false, indicating whether the given number is prime.
// 6. set of numbers wether it is prime or not: eg. 2:prime,3:not a prime,...

..................................readme file..................................................
.........................................................................................
.......................................................................................

Whole Web Development
https://developer.mozilla.org/en-US/docs/Web/Tutorials

# Js-Cookbook
Whole JavaScript Programs
even and odd
swap two numbers
sum of digits in a given number
Fibonacci
Triangle of star
Palindrome, palindromic numbers with less than n
Armstrong
prime number
sorting
search
Array of objects in a array
remove duplicates in array/string
..

Programming
https://www.w3resource.com/javascript-exercises/
https://coderbyte.com



box-sizing:border-box
https://www.youtube.com/results?search_query=box+sizing+border+box+css

Algorithms:
https://towardsdatascience.com/top-algorithms-and-data-structures-you-really-need-to-know-ab9a2a91c7b5
linear serach , binary search, deapth first search, breadth first search
bubble sort, merge sort, quicksort

..................................ref links...................................................................
.............................................................................................................
............................................................................................



// no. of ways a word can be arranged is: n!; where n is length of string
// SUN 3! -> 3*2 = 6 -> SUN SNU UNS USN NSU NUS


const STR = "BONE";

function combinations(str){
    //console.log(s);
    var strLength = str.length;

    function reverse(rev){
        var LetterReverse = rev.split('').reverse().join('');
        return LetterReverse;
    }

    if(strLength<=1){
        console.log("Possible ways of arranging a string is:"+str);
    }
    else if (strLength===2) {
        console.log("Possible ways of arranging a string is:"+str + " " + reverse(str));
    } 
    else{
        var result = [];
        var partialResult = [];
        for(var i=0;i<strLength;i++){

            var firstLetter = str[i];
            console.log("first"+firstLetter);
            
            var otherLetters = str.substring(0,i) + str.substring(i+1); // 0+1 
            console.log("other"+otherLetters);
            
            var reverseOther = reverse(otherLetters);
            console.log(reverseOther);

            partialResult.push(firstLetter+otherLetters);
            partialResult.push(firstLetter+reverseOther);
            
 
        }
        console.log(partialResult);
        console.log(partialResult.length);
    }
    
};

combinations(STR);


// console.time("combo");

// function getPermutations(string) {
//     var results = [];

//     if (string.length === 1) 
//     {
//       results.push(string);
//       console.log("results if ==="+results);
//       return results;
//     }

//     for (var i = 0; i < string.length; i++) 
//     {
//       var firstChar = string[i];
//       console.log("firstChar"+firstChar);
//       var otherChar = string.substring(0, i) + string.substring(i + 1);
//       console.log("otherChar"+ i + otherChar);
//       var otherPermutations = getPermutations(otherChar);
//       console.log("otherPermutations"+otherPermutations);
//       for (var j = 0; j < otherPermutations.length; j++) {
//         results.push(firstChar + otherPermutations[j]);
//         console.log("results j"+ j + results);
//       }
//     }
//     console.log("final result"+results);
//     return results;
//   }
  
//   var permutation = getPermutations('YES');
//   console.log("Total permutation: "+permutation.length);
//   console.log(permutation);

//   console.timeEnd("combo")
....................
    const a = [
        {id:"nidhi",company:"SIS"},
        {id:"Aman",company:"Apple"},
        {id:"nomen",company:"google"}
    ];

    const b = [
        {id:"nidhi",position:"UI"},
        {id:"Ram",position:"FE"},
        {id:"laxman",position:"Full Stack"}
    ];

    //o/p: [ {id:"nidhi",company:"SIS",position:"UI"},{id:"Aman",company:"Apple",position:null},
    //         {id:"Ram",company:null,position:"FE"},.... ]

    // should be const c;
    // check with id's, if same merge two objects

    const c = [];
    var aLength = a.length;
    for(var i=0;i<aLength;i++){
        if(a[i].id === b[i].id){

            c.push( {id:a[i].id,company:a[i].company,position:b[i].position} );
        }
        else{
            c.push( {id:a[i].id,company:a[i].company?a[i].company:null,position:a[i].position?a[i].position:null},
            {id:b[i].id,company:b[i].company?b[i].company:null,position:b[i].position?b[i].position:null} );    
        }
    }

    console.log(c);
    
    // generate random numbers between two numbers
    https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript?rq=1
    
    //
    https://stackoverflow.com/questions/2958841/how-to-loop-through-key-value-object-in-javascript
